{"ast":null,"code":"var _jsxFileName = \"/Users/hyewonlee/Desktop/hyeoz study/nomad-coder/react-masterclass/src/ToDoList.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoList = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n\n  onsubmit = data => {\n    console.log(\"add to do\", data.todo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onsubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"todo\"),\n        placeholder: \"write a to do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}; // useForm 에 type 설정해주기\n// interface IForm {\n//   email: string;\n//   first_name: string;\n//   last_name: string;\n//   id: string;\n//   password: string;\n//   password2: string;\n//   extraError?: string;\n// }\n// const ToDoList = () => {\n//   const {\n//     register,\n//     watch,\n//     handleSubmit,\n//     formState: { errors },\n//     setError,\n//   } = useForm<IForm>({\n//     // input 에 default value 미리 채워놓을 수 있음\n//     defaultValues: {\n//       email: \"@naver.com\",\n//     },\n//   });\n//   const onValid = (data: IForm) => {\n//     // 모든 validation 이 끝났을 때 실행\n//     // console.log(data);\n//     if (data.password !== data.password2) {\n//       // error 를 걸러줄 수 있음\n//       return setError(\n//         \"password\",\n//         { message: \"Password are not the same\" },\n//         { shouldFocus: true }\n//       ); // 특정 에러에 대해 커서 포커스 옮김\n//     }\n//     setError(\"extraError\", { message: \"Server offline\" }); // 전체 form 에 적용되는 에러\n//   };\n//   // console.log(watch()); // form 안의 값을 추적할 수 있음\n//   // console.log(errors); // 에러를 자동으로 감지해서 출력해줌\n//   return (\n//     <div>\n//       <form\n//         onSubmit={handleSubmit(onValid)}\n//         style={{ display: \"flex\", flexDirection: \"column\" }}\n//       >\n//         {/* register 함수의 결과값\n//         name: \"todo\"\n//         onBlur: async event => {…}\n//         onChange: async event => {…}\n//         ref: ref => {…}\n//         [[Prototype]]: Object\n//         이것은 ... 얕은 복사 해주면 각각 들어감\n//         */}\n//         <input\n//           placeholder=\"write a email\"\n//           {...register(\"email\", {\n//             required: \"Email required\",\n//             pattern: {\n//               value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n//               message: \"Only for the naver email is allowed\",\n//             },\n//           })}\n//         />\n//         <span>{errors?.email?.message}</span>\n//         {/* HTML 태그로 requires 넣지 않는 이유는 구형 브라우저에서 작동하지 않거나 소스코드를 직접 수정할 수 있기 때문에 JS 로 처리해주는 것 */}\n//         <input\n//           placeholder=\"write a first_name\"\n//           {...register(\"first_name\", {\n//             required: \"first_name is required\",\n//             validate: { // async, await 으로 api 통신도 가능\n//               noHyes: (value) =>\n//                 value.includes(\"hye\") ? \"no hye is allowed\" : true,\n//             }, // 함수를 받고, value 는 현재 값(first_name)을 받음. true/false 를 반환\n//             minLength: {\n//               value: 5,\n//               message: \"Your first name is too short\",\n//               // message 이렇게 작성하는 방법도 있음\n//             },\n//           })}\n//         />\n//         <span>{errors?.first_name?.message}</span>\n//         <input\n//           placeholder=\"write a last_name\"\n//           {...register(\"last_name\", { required: \"last_name is required\" })}\n//         />\n//         <span>{errors?.last_name?.message}</span>\n//         <input\n//           placeholder=\"write a id\"\n//           {...register(\"id\", { required: \"id is required\" })}\n//         />\n//         <span>{errors?.id?.message}</span>\n//         <input\n//           placeholder=\"write a password\"\n//           {...register(\"password\", { required: \"password is required\" })}\n//         />\n//         <span>{errors?.password?.message}</span>\n//         <input\n//           placeholder=\"write a password2\"\n//           {...register(\"password2\", { required: \"Password is required\" })} // required 에 문자열 넣으면 error message 에 출력\n//         />\n//         <span>{errors?.password2?.message}</span>\n//         <button>Add</button>\n//         <span>{errors?.extraError?.message}</span>\n//       </form>\n//     </div>\n//   );\n// };\n\n\n_s(ToDoList, \"zkd3JmxRK/AmyiWtSfciHeYO5Zk=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/Users/hyewonlee/Desktop/hyeoz study/nomad-coder/react-masterclass/src/ToDoList.tsx"],"names":["React","useForm","ToDoList","register","handleSubmit","onsubmit","data","console","log","todo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BH,OAAO,EAA1C;;AACAI,EAAAA,QAAQ,GAAIC,IAAD,IAAU;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAI,CAACG,IAA9B;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEJ,QAAhB;AAAA,8BACE,sBAAWF,QAAQ,CAAC,MAAD,CAAnB;AAA6B,QAAA,WAAW,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAdD,C,CAgiIN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst ToDoList = () => {\n  const { register, handleSubmit } = useForm();\n  onsubmit = (data) => {\n    console.log(\"add to do\", data.todo);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onsubmit}>\n        <input {...register(\"todo\")} placeholder=\"write a to do\" />\n        <button>Add</button>\n      </form>\n    </div>\n  );\n};\n\n// useForm 에 type 설정해주기\n// interface IForm {\n//   email: string;\n//   first_name: string;\n//   last_name: string;\n//   id: string;\n//   password: string;\n//   password2: string;\n//   extraError?: string;\n// }\n\n// const ToDoList = () => {\n//   const {\n//     register,\n//     watch,\n//     handleSubmit,\n//     formState: { errors },\n//     setError,\n//   } = useForm<IForm>({\n//     // input 에 default value 미리 채워놓을 수 있음\n//     defaultValues: {\n//       email: \"@naver.com\",\n//     },\n//   });\n//   const onValid = (data: IForm) => {\n//     // 모든 validation 이 끝났을 때 실행\n//     // console.log(data);\n//     if (data.password !== data.password2) {\n//       // error 를 걸러줄 수 있음\n//       return setError(\n//         \"password\",\n//         { message: \"Password are not the same\" },\n//         { shouldFocus: true }\n//       ); // 특정 에러에 대해 커서 포커스 옮김\n//     }\n//     setError(\"extraError\", { message: \"Server offline\" }); // 전체 form 에 적용되는 에러\n//   };\n//   // console.log(watch()); // form 안의 값을 추적할 수 있음\n//   // console.log(errors); // 에러를 자동으로 감지해서 출력해줌\n\n//   return (\n//     <div>\n//       <form\n//         onSubmit={handleSubmit(onValid)}\n//         style={{ display: \"flex\", flexDirection: \"column\" }}\n//       >\n//         {/* register 함수의 결과값\n//         name: \"todo\"\n//         onBlur: async event => {…}\n//         onChange: async event => {…}\n//         ref: ref => {…}\n//         [[Prototype]]: Object\n//         이것은 ... 얕은 복사 해주면 각각 들어감\n//         */}\n//         <input\n//           placeholder=\"write a email\"\n//           {...register(\"email\", {\n//             required: \"Email required\",\n//             pattern: {\n//               value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n//               message: \"Only for the naver email is allowed\",\n//             },\n//           })}\n//         />\n//         <span>{errors?.email?.message}</span>\n//         {/* HTML 태그로 requires 넣지 않는 이유는 구형 브라우저에서 작동하지 않거나 소스코드를 직접 수정할 수 있기 때문에 JS 로 처리해주는 것 */}\n//         <input\n//           placeholder=\"write a first_name\"\n//           {...register(\"first_name\", {\n//             required: \"first_name is required\",\n//             validate: { // async, await 으로 api 통신도 가능\n//               noHyes: (value) =>\n//                 value.includes(\"hye\") ? \"no hye is allowed\" : true,\n//             }, // 함수를 받고, value 는 현재 값(first_name)을 받음. true/false 를 반환\n//             minLength: {\n//               value: 5,\n//               message: \"Your first name is too short\",\n//               // message 이렇게 작성하는 방법도 있음\n//             },\n//           })}\n//         />\n//         <span>{errors?.first_name?.message}</span>\n\n//         <input\n//           placeholder=\"write a last_name\"\n//           {...register(\"last_name\", { required: \"last_name is required\" })}\n//         />\n//         <span>{errors?.last_name?.message}</span>\n\n//         <input\n//           placeholder=\"write a id\"\n//           {...register(\"id\", { required: \"id is required\" })}\n//         />\n//         <span>{errors?.id?.message}</span>\n\n//         <input\n//           placeholder=\"write a password\"\n//           {...register(\"password\", { required: \"password is required\" })}\n//         />\n//         <span>{errors?.password?.message}</span>\n\n//         <input\n//           placeholder=\"write a password2\"\n//           {...register(\"password2\", { required: \"Password is required\" })} // required 에 문자열 넣으면 error message 에 출력\n//         />\n//         <span>{errors?.password2?.message}</span>\n//         <button>Add</button>\n//         <span>{errors?.extraError?.message}</span>\n//       </form>\n//     </div>\n//   );\n// };\n\nexport default ToDoList;\n"]},"metadata":{},"sourceType":"module"}