{"ast":null,"code":"var _jsxFileName = \"/Users/hyewonlee/Desktop/hyeoz study/nomad-coder/react-masterclass/src/ToDoList.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\"; // const ToDoList = () => {\n// const [todo, setValue] = useState(\"\");\n// const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n//   const {\n//     currentTarget: { value },\n//   } = event;\n//   setValue(value);\n// };\n// const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n//   event.preventDefault();\n//   console.log(todo);\n// };\n// return (\n//   <div>\n//     <form onSubmit={onSubmit}>\n//       <input onChange={onChange} placeholder=\"write a to do\" />\n//       <button>Add</button>\n//     </form>\n//   </div>\n// );\n// };\n// useForm 에 type 설정해주기\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoList = () => {\n  _s();\n\n  var _errors$email, _errors$first_name, _errors$last_name, _errors$id, _errors$password, _errors$password2;\n\n  const {\n    register,\n    watch,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    // input 에 default value 미리 채워놓을 수 있음\n    defaultValues: {\n      email: \"@naver.com\"\n    }\n  });\n\n  const onValid = data => {\n    // 모든 validation 이 끝났을 때 실행\n    console.log(data);\n  }; // console.log(watch()); // form 안의 값을 추적할 수 있음\n  // console.log(errors); // 에러를 자동으로 감지해서 출력해줌\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onValid),\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"write a email\",\n        ...register(\"email\", {\n          required: \"Email required\",\n          pattern: {\n            value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n            message: \"Only for the naver email is allowed\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"write a first_name\",\n        ...register(\"first_name\", {\n          required: \"first_name is required\",\n          minLength: {\n            value: 5,\n            message: \"Your first name is too short\" // message 이렇게 작성하는 방법도 있음\n\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors === null || errors === void 0 ? void 0 : (_errors$first_name = errors.first_name) === null || _errors$first_name === void 0 ? void 0 : _errors$first_name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"write a last_name\",\n        ...register(\"last_name\", {\n          required: \"last_name is required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors === null || errors === void 0 ? void 0 : (_errors$last_name = errors.last_name) === null || _errors$last_name === void 0 ? void 0 : _errors$last_name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"write a id\",\n        ...register(\"id\", {\n          required: \"id is required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors === null || errors === void 0 ? void 0 : (_errors$id = errors.id) === null || _errors$id === void 0 ? void 0 : _errors$id.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"write a password\",\n        ...register(\"password\", {\n          required: \"password is required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors === null || errors === void 0 ? void 0 : (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"write a password2\",\n        ...register(\"password2\", {\n          required: \"Password is required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors === null || errors === void 0 ? void 0 : (_errors$password2 = errors.password2) === null || _errors$password2 === void 0 ? void 0 : _errors$password2.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoList, \"EhZwRdQivXlLLshoz+KntJftoLo=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/Users/hyewonlee/Desktop/hyeoz study/nomad-coder/react-masterclass/src/ToDoList.tsx"],"names":["React","useForm","ToDoList","register","watch","handleSubmit","formState","errors","defaultValues","email","onValid","data","console","log","display","flexDirection","required","pattern","value","message","minLength","first_name","last_name","id","password","password2"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\n// const ToDoList = () => {\n// const [todo, setValue] = useState(\"\");\n// const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n//   const {\n//     currentTarget: { value },\n//   } = event;\n//   setValue(value);\n// };\n// const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n//   event.preventDefault();\n//   console.log(todo);\n// };\n\n// return (\n//   <div>\n//     <form onSubmit={onSubmit}>\n//       <input onChange={onChange} placeholder=\"write a to do\" />\n//       <button>Add</button>\n//     </form>\n//   </div>\n// );\n// };\n\n// useForm 에 type 설정해주기\ninterface IForm {\n  email: string;\n  first_name: string;\n  last_name: string;\n  id: string;\n  password: string;\n  password2: string;\n}\n\nconst ToDoList = () => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IForm>({\n    // input 에 default value 미리 채워놓을 수 있음\n    defaultValues: {\n      email: \"@naver.com\",\n    },\n  });\n  const onValid = (data: any) => {\n    // 모든 validation 이 끝났을 때 실행\n    console.log(data);\n  };\n  // console.log(watch()); // form 안의 값을 추적할 수 있음\n  // console.log(errors); // 에러를 자동으로 감지해서 출력해줌\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit(onValid)}\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        {/* register 함수의 결과값\n        name: \"todo\"\n        onBlur: async event => {…}\n        onChange: async event => {…}\n        ref: ref => {…}\n        [[Prototype]]: Object\n        이것은 ... 얕은 복사 해주면 각각 들어감\n        */}\n        <input\n          placeholder=\"write a email\"\n          {...register(\"email\", {\n            required: \"Email required\",\n            pattern: {\n              value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n              message: \"Only for the naver email is allowed\",\n            },\n          })}\n        />\n        <span>{errors?.email?.message}</span>\n        {/* HTML 태그로 requires 넣지 않는 이유는 구형 브라우저에서 작동하지 않거나 소스코드를 직접 수정할 수 있기 때문에 JS 로 처리해주는 것 */}\n        <input\n          placeholder=\"write a first_name\"\n          {...register(\"first_name\", {\n            required: \"first_name is required\",\n            minLength: {\n              value: 5,\n              message: \"Your first name is too short\",\n              // message 이렇게 작성하는 방법도 있음\n            },\n          })}\n        />\n        <span>{errors?.first_name?.message}</span>\n\n        <input\n          placeholder=\"write a last_name\"\n          {...register(\"last_name\", { required: \"last_name is required\" })}\n        />\n        <span>{errors?.last_name?.message}</span>\n\n        <input\n          placeholder=\"write a id\"\n          {...register(\"id\", { required: \"id is required\" })}\n        />\n        <span>{errors?.id?.message}</span>\n\n        <input\n          placeholder=\"write a password\"\n          {...register(\"password\", { required: \"password is required\" })}\n        />\n        <span>{errors?.password?.message}</span>\n\n        <input\n          placeholder=\"write a password2\"\n          {...register(\"password2\", { required: \"Password is required\" })} // required 에 문자열 넣으면 error message 에 출력\n        />\n        <span>{errors?.password2?.message}</span>\n\n        <button>Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ToDoList;\n"]},"metadata":{},"sourceType":"module"}