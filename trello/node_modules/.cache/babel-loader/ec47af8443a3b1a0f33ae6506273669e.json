{"ast":null,"code":"import { atom, selector } from \"recoil\";\n// atom 은 단순히 '배열' 이라는 것을 준다면\n// selector 는 state 를 가져다가 다른 뭔가를 return 하는 동작\nexport const todoState = atom({\n  key: \"todo\",\n  default: []\n}); // set 함수와 다른 점은 set 함수는 원래 state 를 변형한다면 selector 는 기존 state를 이용만 할 뿐 변형하지는 않음\n\nexport const todoSelector = selector({\n  key: \"todoSelector\",\n  get: _ref => {\n    let {\n      get\n    } = _ref;\n    const todos = get(todoState); // 모든 투두를 받음 (get은 함수), 계속 주시하고 있음\n\n    return [todos.filter(todo => todo.category === \"TO_DO\"), todos.filter(todo => todo.category === \"DOING\"), todos.filter(todo => todo.category === \"DONE\")]; // [[], [], []] 이렇게 저장됨\n  }\n});","map":{"version":3,"sources":["/Users/hyewonlee/Desktop/hyeoz study/nomad-coder/react-masterclass/src/atoms.tsx"],"names":["atom","selector","todoState","key","default","todoSelector","get","todos","filter","todo","category"],"mappings":"AAAA,SAASA,IAAT,EAAeC,QAAf,QAA+B,QAA/B;AASA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGF,IAAI,CAAU;AACrCG,EAAAA,GAAG,EAAE,MADgC;AAErCC,EAAAA,OAAO,EAAE;AAF4B,CAAV,CAAtB,C,CAIP;;AACA,OAAO,MAAMC,YAAY,GAAGJ,QAAQ,CAAC;AACnCE,EAAAA,GAAG,EAAE,cAD8B;AAEnCG,EAAAA,GAAG,EAAE,QAAa;AAAA,QAAZ;AAAEA,MAAAA;AAAF,KAAY;AAChB,UAAMC,KAAK,GAAGD,GAAG,CAACJ,SAAD,CAAjB,CADgB,CACc;;AAC9B,WAAO,CACLK,KAAK,CAACC,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkB,OAAzC,CADK,EAELH,KAAK,CAACC,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkB,OAAzC,CAFK,EAGLH,KAAK,CAACC,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkB,MAAzC,CAHK,CAAP,CAFgB,CAMb;AACJ;AATkC,CAAD,CAA7B","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport interface ITodo {\n  text: string;\n  // 특정 옵션으로 제한할 경우\n  category: \"TO_DO\" | \"DOING\" | \"DONE\";\n  id: number;\n}\n\n// atom 은 단순히 '배열' 이라는 것을 준다면\n// selector 는 state 를 가져다가 다른 뭔가를 return 하는 동작\nexport const todoState = atom<ITodo[]>({\n  key: \"todo\",\n  default: [],\n});\n// set 함수와 다른 점은 set 함수는 원래 state 를 변형한다면 selector 는 기존 state를 이용만 할 뿐 변형하지는 않음\nexport const todoSelector = selector({\n  key: \"todoSelector\",\n  get: ({ get }) => {\n    const todos = get(todoState); // 모든 투두를 받음 (get은 함수), 계속 주시하고 있음\n    return [\n      todos.filter((todo) => todo.category === \"TO_DO\"),\n      todos.filter((todo) => todo.category === \"DOING\"),\n      todos.filter((todo) => todo.category === \"DONE\"),\n    ]; // [[], [], []] 이렇게 저장됨\n  },\n});\n"]},"metadata":{},"sourceType":"module"}